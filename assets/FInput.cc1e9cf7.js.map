{"version":3,"file":"FInput.cc1e9cf7.js","sources":["../../../../node_modules/vuetify/lib/components/VTextField/VTextField.mjs","../../../../node_modules/bignumber.js/bignumber.mjs","../../../../node_modules/@foxone/utils/number.js","../../src/utils/helpers.ts","../../src/components/FInput/FInput.tsx"],"sourcesContent":["import { Fragment as _Fragment, withDirectives as _withDirectives, createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\n// Styles\nimport \"./VTextField.css\";\n\n// Components\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\"; // Directives\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue';\nimport { callEvent, filterInputAttrs, genericComponent, pick, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nconst EventProp = [Function, Array];\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: Function,\n  hint: String,\n  persistentHint: Boolean,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  type: {\n    type: String,\n    default: 'text'\n  },\n  ...makeVInputProps(),\n  ...makeVFieldProps()\n}, 'v-text-field');\nexport const VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: makeVTextFieldProps(),\n  emits: {\n    'click:control': e => true,\n    'click:input': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value ?? '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const inputRef = ref();\n    const isActive = computed(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value);\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : isFocused.value || props.persistentHint ? props.hint : '';\n    });\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        var _inputRef$value;\n        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();\n      }\n      if (!isFocused.value) focus();\n    }\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = null;\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n    function onInput(e) {\n      model.value = e.target.value;\n    }\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant)\n        }],\n        \"onClick:prepend\": props['onClick:prepend'],\n        \"onClick:append\": props['onClick:append']\n      }, rootAttrs, inputProps, {\n        \"focused\": isFocused.value,\n        \"messages\": messages.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": e => {\n              if (e.target === inputRef.value) return;\n              e.preventDefault();\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), {\n            ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              const inputNode = _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"name\": props.name,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]);\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), slots.default ? _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"onClick\": e => emit('click:input', e),\n                \"data-no-activator\": \"\"\n              }, [slots.default(), inputNode]) : cloneVNode(inputNode, {\n                class: fieldClass\n              }), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => {\n          var _slots$details;\n          return _createVNode(_Fragment, null, [(_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n            \"active\": props.persistentCounter || isFocused.value,\n            \"value\": counterValue.value,\n            \"max\": max.value\n          }, slots.counter)])]);\n        } : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef);\n  }\n});\nexport function filterVTextFieldProps(props) {\n  return pick(props, Object.keys(VTextField.props));\n}\n//# sourceMappingURL=VTextField.mjs.map","/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var n,\r\n      i = 1,\r\n      m = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport BigNumber from \"bignumber.js\"; // set exponential\n\nBigNumber.config({\n  EXPONENTIAL_AT: 12\n});\n/**\n * get default decimal place depend on number value\n *\n * @export\n * @param {BigNumber.Value} n\n * @return {*}\n */\n\nexport function getDefaultDecimalPlace(n) {\n  var num = new BigNumber(n);\n  return num.gt(1e4) ? 2 : num.gt(1) ? 4 : 8;\n}\n/**\n * convert number to string with symbol sign\n *\n * @export\n * @param {number} n\n * @return {*}\n */\n\nexport function symbology(n) {\n  return n >= 0 ? \"+\".concat(n) : \"\".concat(n);\n}\n/**\n * format number with certain decimal place\n *\n * @export\n * @param {{\n *   n: BigNumber.Value;\n *   dp?: number;\n *   max_dp?: number;\n *   fixed?: boolean;\n *   mode?: BigNumber.RoundingMode;\n * }} opts\n * @return {*}  {string}\n */\n\nexport function format(opts) {\n  var _opts$mode;\n\n  var num = new BigNumber(opts.n);\n  var mode = (_opts$mode = opts.mode) !== null && _opts$mode !== void 0 ? _opts$mode : BigNumber.ROUND_DOWN;\n  var dp = opts.dp || getDefaultDecimalPlace(num);\n\n  if (opts.max_dp) {\n    dp = Math.min(dp, opts.max_dp);\n  }\n\n  return opts.fixed ? num.toFormat(dp, mode) : num.decimalPlaces(dp, mode).toFormat();\n}\n/**\n * format simplize number with Intl\n *\n * @export\n * @param {{\n *   n: number;\n *   locale?: string;\n *   dp?: number;\n *   configs?: Partial<Intl.NumberFormatOptions>;\n * }} opts\n * @return {*}\n */\n\nexport function simplize(opts) {\n  var _opts$configs;\n\n  var configs = (_opts$configs = opts.configs) !== null && _opts$configs !== void 0 ? _opts$configs : {};\n  var intl = new Intl.NumberFormat(opts.locale, _objectSpread({\n    maximumFractionDigits: 2,\n    minimumFractionDigits: 2,\n    notation: \"compact\"\n  }, configs));\n  return intl.format(opts.n);\n}\n/**\n * change number to certain decimal place without format number\n *\n * @export\n * @param {{\n *   n: BigNumber.Value;\n *   dp?: number;\n *   mode?: BigNumber.RoundingMode;\n * }} opts\n * @return {*}\n */\n\nexport function toPrecision(opts) {\n  var _opts$mode2;\n\n  var dp = opts.dp || getDefaultDecimalPlace(opts.n);\n  var mode = (_opts$mode2 = opts.mode) !== null && _opts$mode2 !== void 0 ? _opts$mode2 : BigNumber.ROUND_DOWN;\n  var bn = new BigNumber(opts.n);\n  return bn.dp() > dp ? bn.decimalPlaces(dp, mode).toFixed(dp) : Number(opts.n).toString();\n}\n/**\n * change number to equal percent format\n *\n * @export\n * @param {{\n *   n: BigNumber.Value;\n *   symbol?: boolean;\n *   dp?: number;\n * }} opts\n * @return {*}\n */\n\nexport function toPercent(opts) {\n  var _opts$dp = opts.dp,\n      dp = _opts$dp === void 0 ? 2 : _opts$dp,\n      n = opts.n,\n      _opts$symbol = opts.symbol,\n      symbol = _opts$symbol === void 0 ? false : _opts$symbol;\n  var bn = new BigNumber(n);\n  var s = symbol ? bn.gte(0) ? \"+\" : \"\" : \"\";\n  return \"\".concat(s).concat(bn.multipliedBy(100).toFixed(dp), \"%\");\n}\n/**\n * get fixed number\n *\n * @export\n * @param {{ n: BigNumber.Value; p?: number }} opts\n * @return {*}\n */\n\nexport function toFixed(opts) {\n  var n = opts.n,\n      _opts$p = opts.p,\n      p = _opts$p === void 0 ? 2 : _opts$p;\n  return new BigNumber(n).toFixed(p);\n}","import { toPrecision } from \"@foxone/utils/number\";\nimport BigNumber from \"bignumber.js\";\nimport type { Asset } from \"../types\";\n\nexport function convertMixinAsset(asset): Asset {\n  return {\n    id: asset.asset_id,\n    symbol: asset.symbol,\n    logo: asset.icon_url,\n    name: asset.name,\n  };\n}\n\nexport function numberInput(value: string, precision: number | string) {\n  const dp = new BigNumber(value).decimalPlaces();\n\n  if (dp && dp > +precision) {\n    return toPrecision({ n: value, dp: +precision });\n  }\n\n  return value;\n}\n\nexport function filterAssets(assets: Asset[], filter: string) {\n  return assets.filter((asset) => {\n    const name = (asset?.name || \"\").toLowerCase();\n    const symbol = (asset?.symbol || \"\").toLowerCase();\n\n    return name.startsWith(filter) || symbol.includes(filter);\n  });\n}\n\nexport function getBrowser() {\n  const ua = navigator.userAgent.toLowerCase();\n\n  if (ua.indexOf(\"firefox\") > -1) {\n    return \"firefox\";\n  }\n\n  if (ua.indexOf(\"chrome\") > -1) {\n    return \"chrome\";\n  }\n\n  return \"others\";\n}","import { defineComponent, ref } from \"vue\";\nimport { VTextField } from \"vuetify/components\";\nimport { numberInput } from \"../../utils\";\n\nimport \"./FInput.scss\";\n\nexport const FInput = defineComponent({\n  name: \"FInput\",\n\n  props: {\n    modelValue: { type: String, default: \"\" },\n    precision: { type: [Number, String] },\n    hideDefaultMessages: Boolean,\n  },\n\n  emits: {\n    \"update:modelValue\": (value) => true,\n  },\n\n  setup(props, { attrs, emit, slots }) {\n    const inputRef = ref<typeof VTextField>();\n\n    const handleChange = (value) => {\n      if (attrs.type === \"number\" && props.precision) {\n        emit(\"update:modelValue\", numberInput(value, props.precision));\n        inputRef?.value?.$forceUpdate();\n\n        return;\n      }\n\n      emit(\"update:modelValue\", value);\n    };\n\n    const handleKeydown = (e: KeyboardEvent) => {\n      if (attrs.type === \"number\") {\n        if ([\"e\", \"+\", \"-\"].includes(e.key)) {\n          e.preventDefault();\n        }\n      }\n    };\n\n    return () => (\n      <VTextField\n        ref={inputRef}\n        class={[\n          \"f-input\",\n          { \"f-input--hide-default-messages\": props.hideDefaultMessages },\n          { \"f-input--focused\": inputRef?.value?.focused },\n        ]}\n        modelValue={props.modelValue}\n        onUpdate:modelValue={handleChange}\n        onKeydown={handleKeydown}\n      >\n        {{\n          ...slots,\n          details: (slotProps) => {\n            return (\n              slots.tools && (\n                <div class=\"f-input__tools\">{slots.tools?.(slotProps)}</div>\n              )\n            );\n          },\n        }}\n      </VTextField>\n    );\n  },\n});\n"],"names":["activeTypes","makeVTextFieldProps","propsFactory","makeVInputProps","makeVFieldProps","VTextField","genericComponent","Intersect","e","focused","val","props","_ref","attrs","emit","slots","model","useProxiedModel","isFocused","focus","blur","useFocus","counterValue","computed","_a","max","onIntersect","isIntersecting","entries","_entries$0$target","_entries$0$target$foc","__name","vInputRef","ref","vFieldRef","inputRef","isActive","messages","onFocus","_inputRef$value","onControlClick","onClear","nextTick","callEvent","onInput","useRender","hasCounter","hasDetails","rootAttrs","inputAttrs","filterInputAttrs","_","inputProps","filterInputProps","fieldProps","filterFieldProps","_createVNode","VInput","_mergeProps","$event","_ref2","id","isDisabled","isDirty","isReadonly","isValid","VField","_ref3","fieldClass","slotProps","inputNode","_withDirectives","_resolveDirective","_Fragment","cloneVNode","_slots$details","VCounter","forwardRefs","filterVTextFieldProps","pick","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","BigNumber","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","ALPHABET","alphabetHasNormalDecimalDigits","v","b","alphabet","c","caseChanged","i","isNum","len","str","x","intCheck","round","obj","p","n","s","out","maxOrMin","pow2_53","random53bitInt","dp","a","k","rand","args","sum","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","sign","callerIsToString","d","r","xc","y","rm","toFixedPoint","coeffToString","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","bitFloor","format","c0","ne","toExponential","method","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","p1","p2","sd","ni","rd","pows10","valueOf","half","isModExp","nIsBig","nIsNeg","nIsOdd","isOdd","t","xLTy","xe","ye","xcL","ycL","ylo","yhi","zc","sqrtBase","rep","g1","g2","groupSeparator","intPart","fractionPart","isNeg","intDigits","md","d0","d1","d2","exp","n0","n1","z","l","min","name","zs","getDefaultDecimalPlace","num","toPrecision","opts","_opts$mode2","mode","bn","convertMixinAsset","asset","numberInput","value","precision","filterAssets","assets","filter","symbol","getBrowser","ua","FInput","defineComponent","modelValue","type","String","default","Number","hideDefaultMessages","Boolean","emits","setup","handleChange","$forceUpdate","handleKeydown","includes","key","preventDefault","details","tools"],"mappings":"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"}